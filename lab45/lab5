% Предикат для печати всех нечётных чисел в убывающем порядке
нечетные_в_убывании(Верх, Низ) :-
    Верх >= Низ,  % Проверяем, что верхняя граница больше или равна нижней
    (   Верх mod 2 =:= 0 -> Верх1 is Верх - 1 ; Верх1 is Верх  % Если верхняя граница четная, делаем её нечетной
    ),
    writeln(Верх1),  % Печатаем текущее нечетное число
    НовыйВерх is Верх1 - 2,  % Переходим к следующему нечетному числу
    нечетные_в_убывании(НовыйВерх, Низ).  % Рекурсивно вызываем предикат

нечетные_в_убывании(Верх, Низ) :- Верх < Низ. % Условие выхода из рекурсии

% Предикат для начала работы, принимает ввод пользователем
ввести_диапазон :-
    writeln('Введите нижнюю границу диапазона:'),
    read(Низ),
    writeln('Введите верхнюю границу диапазона:'),
    read(Верх),
    нечетные_в_убывании(Верх, Низ).
----------------------- 
ввести_диапазон
5
15
------------------------
% Предикат для вычисления n-го числа Фибоначчи
fib(0, 1).
fib(1, 1).
fib(N, F) :- 
    N > 1, 
    N1 is N - 1, 
    N2 is N - 2, 
    fib(N1, F1), 
    fib(N2, F2), 
    F is F1 + F2.

% Предикат для запроса номера и вывода числа Фибоначчи
найти_фиб :-
    repeat,
    write('Введите номер (отрицательное число для выхода): '),
    read(N),
    (   N < 0 -> 
        write('Выход из программы.'), nl, ! 
    ;   fib(N, F), 
        format('Число Фибоначчи F(~w) = ~w~n', [N, F]), 
        fail
    ).
------------------
найти_фиб
6 -> 13
-------------
% Основной предикат
split_list(List, Min, Max, LessThanMin, Between, GreaterThanMax) :-
    split_helper(List, Min, Max, LessThanMin, Between, GreaterThanMax).

% Вспомогательный предикат
split_helper([], _, _, [], [], []).  % Базовый случай: пустой список

split_helper([H|T], Min, Max, [H|LessThanMin], Between, GreaterThanMax) :-
    H < Min,
    split_helper(T, Min, Max, LessThanMin, Between, GreaterThanMax).  % Добавляем в первый подсписок

split_helper([H|T], Min, Max, LessThanMin, [H|Between], GreaterThanMax) :-
    H >= Min,
    H =< Max,
    split_helper(T, Min, Max, LessThanMin, Between, GreaterThanMax).  % Добавляем во второй подсписок

split_helper([H|T], Min, Max, LessThanMin, Between, [H|GreaterThanMax]) :-
    H > Max,
    split_helper(T, Min, Max, LessThanMin, Between, GreaterThanMax).  % Добавляем в третий подсписок

% Предикат для ввода
run_split :-
    write('Введите список (например, [3,7,1,-3,5,8,0,9,2]): '),
    read(List),
    write('Введите первое число: '),
    read(Min),
    write('Введите второе число: '),
    read(Max),
    split_list(List, Min, Max, LessThanMin, Between, GreaterThanMax),
    write('Меньше '), write(Min), write(': '), write(LessThanMin), nl,
    write('От '), write(Min), write(' до '), write(Max), write(': '), write(Between), nl,
    write('Больше '), write(Max), write(': '), write(GreaterThanMax), nl.
-----------------------------------
 [3,7,1,-3,5,8,0,9,2]
3
8
->
[1,-3,0,2], [3,7,5,8], [9].
-----------------------------------------
% Предикат для подсчета вхождений элементов списка.
count_occurrences([], CountList) :- CountList = [].
count_occurrences([H|T], CountList) :-
    count(H, [H|T], 1, N),
    delete(T, H, T1),
    count_occurrences(T1, RestCount),
    append([[H, N]], RestCount, CountList).

% Вспомогательный предикат для подсчета количества вхождений элемента.
count(_, [], Count, Count).
count(X, [X|T], Acc, Count) :- 
    Acc1 is Acc + 1,
    count(X, T, Acc1, Count).
count(X, [Y|T], Acc, Count) :- 
    X \= Y,
    count(X, T, Acc, Count).

% Предикат для нахождения максимального количества вхождений.
max_occurrences([], 0).
max_occurrences([[_, N]|T], MaxCount) :-
    max_occurrences(T, MaxCountRest),
    MaxCount is max(N, MaxCountRest).

% Основной предикат для получения списка наиболее часто встречающихся элементов.
most_frequent(List, MostFreq) :-
    count_occurrences(List, CountList),
    max_occurrences(CountList, MaxCount),
    findall(E, (member([E, Count], CountList), Count = MaxCount), MostFreq).

% Запуск через консоль.
start :-
    write('Введите список чисел (например, [0,3,5,7,1,5,3,0,3,3,5,7,0,5,0]): '),
    read(InputList),
    most_frequent(InputList, MostFreq),
    write('Наиболее часто встречающиеся элементы: '), write(MostFreq).
-------------------------
[0,3,5,7,1,5,3,0,3,3,5,7,0,5,0]
->
[0, 3, 5]
----------------------------